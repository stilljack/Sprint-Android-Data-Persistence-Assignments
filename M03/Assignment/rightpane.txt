//instructions are not super clear, as usual for older assignments... 
//as I work through the instructions going to put the code I used, brief descriptions of results and reflections

SELECT * FROM TEAMS
//predictably returns all the rows contained in the table TEAMS

SELECT name FROM TEAMS

//woops

SELECT team_name FROM TEAMS

//there we go, returns just the names of all entries of the TEAMS table

SELECT team_name FROM TEAMS WHERE id=2

//returns "the dorks" -- as expected, returns the value of team_name from the table TEAMS  that has the id=2

SELECT team_name FROM TEAMS WHERE id>=2

//returns
// THE DORKS
//the nerds
//the also-rans
// i.e anything with id value that is equal to or greater than 2

DELETE FROM TEAMS WHERE id<=2;
SELECT * FROM TEAMS

//returns rows with id 3 and 4 and rows with id less than or equal to 2 have been deleted

UPDATE PLAYERS SET first_name="new value"  WHERE id=2 or id=3;
SELECT * FROM PLAYERS

//returns table players such that players with id=2 or id=3 now have their first names changed to "new value"

UPDATE PLAYERS SET first_name="Jack"  WHERE first_name="jack";
SELECT * FROM PLAYERS

//blah blah blah, looks through the db finds the objects that match the query first_name="jack" and replaces them with "Jack"

//foriegn key stretch
// so having altered leftpane -- the schema? sure the schema-- to include setting PLAYERS.team to TEAMS.id as a foriegn_key,
//I was able to use SELECT * FROM PLAYERS JOIN TEAMS ON PLAYERS.team = TEAMS.id
I got back...

    SELECT * FROM PLAYERS JOIN TEAMS ON PLAYERS.team = TEAMS.id;

| id  | first_name | last_name      | age   | team | team_name     | location   | founded |
| --- | ---------- | -------------- | ----- | ---- | ------------- | ---------- | ------- |
| 1   | jack       | seymour        | 6     | 1    | the losers    | usa        | 1985    |
| 3   | jOHN       | stamos         | 4     | 3    | the nerds     | not mexico | 1980    |
| 4   | OTHER      | GUYONFULLHOUSE | 12    | 4    | the also-rans | canada     | 1972    |
| 2   | 1337       | HAX0R          | 30000 | 2    | THE DORKS     | cambodia   | 1999    |

---





//(and here's the leftpange.txt)
**Schema (SQLite v3.26)**

      
    CREATE TABLE PLAYERS (
     id INTEGER PRIMARY KEY,
     first_name TEXT,
     last_name TEXT,
     age INTEGER,
     team integer,
     FOREIGN KEY(team) REFERENCES TEAMS(id)
    );
    
    CREATE TABLE TEAMS (
     id INTEGER PRIMARY KEY,
     team_name TEXT,
     location TEXT,
     founded INTEGER
    );
    
    INSERT INTO PLAYERS (id, first_name,last_name,age,team)
    VALUES (1,"jack","seymour",6,1);
    INSERT INTO PLAYERS (id, first_name,last_name,age,team)
    VALUES (2,"jOHN","stamos",4,3);
    INSERT INTO PLAYERS (id, first_name,last_name,age,team)
    VALUES (3,"OTHER","GUYONFULLHOUSE",12,4);
    INSERT INTO PLAYERS (id, first_name,last_name,age,team)
    VALUES (42,"1337","HAX0R",30000,2);
    
    INSERT INTO TEAMS (id, team_name,location,founded)
    VALUES (1,"the losers","usa",1985);
    INSERT INTO TEAMS (id, team_name,location,founded)
    VALUES (2,"THE DORKS","cambodia",1999);
    INSERT INTO TEAMS (id, team_name,location,founded)
    VALUES (3,"the nerds","not mexico",1980);
    INSERT INTO TEAMS (id, team_name,location,founded)
    VALUES (4,"the also-rans","canada",1972);
    

---
